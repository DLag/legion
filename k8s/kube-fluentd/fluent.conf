# Used for health checking
<source>
  @type http
  port 9880
  bind 0.0.0.0
</source>
# Emits internal metrics to every minute, and also exposes them on port
# 24220. Useful for determining if an output plugin is retryring/erroring,
# or determining the buffer queue length.
<source>
  @type monitor_agent
  bind 0.0.0.0
  port 24220
  tag fluentd.monitor.metrics
</source>

<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>

# Example:
# {"log":"[info:2016-02-16T16:04:05.930-08:00] Some log text here\n","stream":"stdout","time":"2016-02-17T00:04:05.931087621Z"}
<source>
  type tail
  path /var/log/containers/*.log
  pos_file /var/log/es-containers.log.pos
  time_format %Y-%m-%dT%H:%M:%S.%NZ
  tag kubernetes.*
  format json
  read_from_head true
</source>

# Examples:
# time="2016-02-04T06:51:03.053580605Z" level=info msg="GET /containers/json"
# time="2016-02-04T07:53:57.505612354Z" level=error msg="HTTP Error" err="No such image: -f" statusCode=404
<source>
  type tail
  format /^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?/
  path /var/log/docker.log
  pos_file /var/log/es-docker.log.pos
  tag services.docker
</source>

# Example:
# 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal
<source>
  type tail
  # Not parsing this, because it doesn't have anything particularly useful to
  # parse out of it (like severities).
  format none
  path /var/log/etcd.log
  pos_file /var/log/es-etcd.log.pos
  tag services.etcd
</source>

# Multi-line parsing is required for all the kube logs because very large log
# statements, such as those that include entire object bodies, get split into
# multiple lines by glog.

# Example:
# I0204 07:32:30.020537    3368 server.go:1048] POST /stats/container/: (13.972191ms) 200 [[Go-http-client/1.1] 10.244.1.3:40537]
<source>
  type tail
  format multiline
  multiline_flush_interval 5s
  format_firstline /^\w\d{4}/
  format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
  time_format %m%d %H:%M:%S.%N
  path /var/log/kubelet.log
  pos_file /var/log/es-kubelet.log.pos
  tag services.kubelet
</source>

# Example:
# I1118 21:26:53.975789       6 proxier.go:1096] Port "nodePort for kube-system/default-http-backend:http" (:31429/tcp) was open before and is still needed
<source>
  type tail
  format multiline
  multiline_flush_interval 5s
  format_firstline /^\w\d{4}/
  format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
  time_format %m%d %H:%M:%S.%N
  path /var/log/kube-proxy.log
  pos_file /var/log/es-kube-proxy.log.pos
  tag services.kube-proxy
</source>

# Example:
# I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms) 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]
<source>
  type tail
  format multiline
  multiline_flush_interval 5s
  format_firstline /^\w\d{4}/
  format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
  time_format %m%d %H:%M:%S.%N
  path /var/log/kube-apiserver.log
  pos_file /var/log/es-kube-apiserver.log.pos
  tag services.kube-apiserver
</source>

# Example:
# I0204 06:55:31.872680       5 servicecontroller.go:277] LB already exists and doesn't need update for service kube-system/kube-ui
<source>
  type tail
  format multiline
  multiline_flush_interval 5s
  format_firstline /^\w\d{4}/
  format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
  time_format %m%d %H:%M:%S.%N
  path /var/log/kube-controller-manager.log
  pos_file /var/log/es-kube-controller-manager.log.pos
  tag services.kube-controller-manager
</source>

# Example:
# W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193: watch of *api.Service ended with: 401: The event in requested index is outdated and cleared (the requested history has been cleared [2578313/2577886]) [2579312]
<source>
  type tail
  format multiline
  multiline_flush_interval 5s
  format_firstline /^\w\d{4}/
  format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
  time_format %m%d %H:%M:%S.%N
  path /var/log/kube-scheduler.log
  pos_file /var/log/es-kube-scheduler.log.pos
  tag services.kube-scheduler
</source>

<filter kubernetes.**>
  type kubernetes_metadata
</filter>

# rewrite_tag_filter does not support nested fields like
# kubernetes.container_name, so this exists to flatten the fields
# so we can use them in our rewrite_tag_filter
<filter kubernetes.**>
  @type record_transformer
  enable_ruby true
  <record>
    kubernetes_namespace_container_name ${record["kubernetes"]["namespace_name"]}.${record["kubernetes"]["pod_name"]}.${record["kubernetes"]["container_name"]}
  </record>
</filter>

# retag based on the namespace and container name of the log message
<match kubernetes.**>
  @type rewrite_tag_filter
  # Update the tag have a structure of kube.<namespace>.<containername>
  <rule>
  key kubernetes_namespace_container_name
  pattern ^(.+)$
  tag kube.$1
  </rule>
</match>

# Remove the unnecessary field as the information is already available on
# other fields.
<filter kube.**>
  @type record_transformer
  remove_keys kubernetes_namespace_container_name
</filter>

<source>
  @type systemd
  tag journald
  path /var/log/journal
  read_from_head true
  <storage>
    @type local
    persistent false
    path /var/log/es-journald.pos
  </storage>
  <entry>
    fields_strip_underscores true
    fields_lowercase true
  </entry>
</source>

<filter journald>
  @type systemd_entry
  field_map {"MESSAGE": "log", "_PID": ["process", "pid"], "_CMDLINE": "process", "_COMM": "cmd"}
  field_map_strict false
  fields_lowercase true
  fields_strip_underscores true
</filter>

<match kube.**>
   @type forest
   subtype s3
   <template>
      s3_bucket "#{ENV['KUBE_LOGS_S3_BUCKET_NAME']}"
      s3_region "#{ENV['KUBE_LOGS_S3_BUCKET_REGION']}"
      path cluster_logs/
      buffer_path /var/log/fluent/s3-buffer.*.${tag}

      time_slice_format %Y/%m/%d/%H
      s3_object_key_format "%{path}%{time_slice}/kubernetes/pods/${tag_parts[1]}/${tag_parts[2]}/${tag_parts[3]}.%{index}.log"

      flush_interval 2m
      utc
      store_as text

      use_server_side_encryption AES256
      buffer_chunk_limit 25m
   </template>
</match>

<match journald.**>
   @type forest
   subtype s3
   <template>
      s3_bucket "#{ENV['SYSTEM_LOGS_S3_BUCKET_NAME']}"
      s3_region "#{ENV['SYSTEM_LOGS_S3_BUCKET_REGION']}"
      path cluster_logs/
      buffer_path /var/log/fluent/s3-buffer.*.${tag}

      time_slice_format %Y/%m/%d/%H
      s3_object_key_format "%{path}%{time_slice}/nodes/#{ENV['NODE_NAME']}/journald/${tag}.%{index}.log"

      flush_interval 2m
      utc
      store_as text

      use_server_side_encryption AES256
      buffer_chunk_limit 25m
   </template>
</match>

<match services.**>
   @type forest
   subtype s3
   <template>
      s3_bucket "#{ENV['SYSTEM_LOGS_S3_BUCKET_NAME']}"
      s3_region "#{ENV['SYSTEM_LOGS_S3_BUCKET_REGION']}"
      path cluster_logs/
      buffer_path /var/log/fluent/s3-buffer.*.${tag}

      time_slice_format %Y/%m/%d/%H
      s3_object_key_format "%{path}%{time_slice}/nodes/#{ENV['NODE_NAME']}/services/${tag_parts[1]}.%{index}.log"

      flush_interval 2m
      utc
      store_as text

      use_server_side_encryption AES256
      buffer_chunk_limit 25m
   </template>
</match>